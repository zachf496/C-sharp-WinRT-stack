namespace TestComp
{
    // Event handlers
    delegate void EventHandler0();
    delegate void EventHandler1(Class sender);
    delegate void EventHandler2(Class sender, Int32 arg0);
    delegate void EventHandler3(Class sender, Int32 arg0, String arg1);
    delegate void EventHandlerCollection(Class sender, Windows.Foundation.Collections.IVector<Int32> arg0, Windows.Foundation.Collections.IMap<Int32, String> arg1);

    // todo: 
    // structs 
    // in, out, const ref
    // arrays - fill, receive, pass, of struct
    // object/IInspectable
    // generics

    delegate String ProvideString();

    [default_interface]
    runtimeclass Class : Windows.Foundation.IStringable //, Windows.Foundation.Collections.IVector<String>
    {
        Class();
    
        event EventHandler0 Event0;
        void InvokeEvent0();
        event EventHandler1 Event1;
        void InvokeEvent1(Class sender);
        event EventHandler2 Event2;
        void InvokeEvent2(Class sender, Int32 arg0);
        event EventHandler3 Event3;
        void InvokeEvent3(Class sender, Int32 arg0, String arg1);
        event EventHandlerCollection CollectionEvent;
        void InvokeCollectionEvent(Class sender, Windows.Foundation.Collections.IVector<Int32> arg0, Windows.Foundation.Collections.IMap<Int32, String> arg1);
        event Windows.Foundation.EventHandler<Windows.Foundation.Collections.IVector<Int32> > NestedEvent;
        void InvokeNestedEvent(Class sender, Windows.Foundation.Collections.IVector<Int32> arg0);
        event Windows.Foundation.TypedEventHandler<Class, Windows.Foundation.Collections.IVector<String> > NestedTypedEvent;
        void InvokeNestedTypedEvent(Class sender, Windows.Foundation.Collections.IVector<String> arg0);

        Int32 IntProperty;
        event Windows.Foundation.EventHandler<Int32> IntPropertyChanged;
        
        String StringProperty;
        event Windows.Foundation.TypedEventHandler<Class, String> StringPropertyChanged;

        String StringProperty2;

        Windows.Foundation.Collections.IVector<String> StringsProperty;

        void GetString();
        void SetString(ProvideString provideString);
    }
}
